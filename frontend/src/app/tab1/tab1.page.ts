import { Component } from '@angular/core';
import { PhotoService } from '../services/photo.service';
import { ApiService } from '../services/api.service';

@Component({
  selector: 'app-tab1',
  templateUrl: 'tab1.page.html',
  styleUrls: ['tab1.page.scss']
})
export class Tab1Page {

  photo;
  result;

  constructor(public photoService: PhotoService, private apiService: ApiService) {
    // let img = "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";

    // this.apiService.predictStroke({data : img}).subscribe((res : any) => {
    //   console.log(res);
    //   this.result = res.prediction[0][0] * 100;
    //   console.log(res.prediction[0][0] * 100);
    // })
  }

  capturePhoto = (sourceType) => {
    this.photoService.takePicture(sourceType).then(imageData => {
      this.result = "";
      console.log(imageData);

      this.photo = 'data:image/jpeg;base64,' + imageData;

      this.apiService.predictStroke({data: imageData}).subscribe((results : any) => {
        if(results.prediction) {
          this.result = results.prediction[0][0] * 100;
        }
      })
    }, (err) => {
      console.log("Camera issue: " + err);
    })
  }

}
